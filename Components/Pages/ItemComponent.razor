@page "/item"
@using LostAndFoundApp.Enum
@using LostAndFoundApp.Models
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject LostAndFoundApp.Services.IItemService ItemService
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="/css/itemview.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
</head>

<div class="container">
    <div class="header">
        <h1>Lost & Found Items</h1>
        <button class="add-item-btn" @onclick="OpenAddItemModal">Add Item</button>
    </div>

    <!-- Search and Filter Section -->
    <div class="search-filter-container">
        <div class="search-row">
            <div class="form-group search-input">
                <label for="searchTerm">Search Items</label>
                <input type="text" id="searchTerm" class="form-control"
                       @bind="searchFilter.SearchTerm"
                       @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchItems(); })"
                       placeholder="Search by name, description, or finder..." />
            </div>

            <div class="form-group">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="form-control" @bind="searchFilter.StatusFilter">
                    <option value="">All Statuses</option>
                    @foreach (ItemStatus status in Enum.GetValues<ItemStatus>())
                    {
                        <option value="@status">@status</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="dateFrom">Date From</label>
                <input type="date" id="dateFrom" class="form-control" @bind="searchFilter.DateFrom" />
            </div>

            <div class="form-group">
                <label for="dateTo">Date To</label>
                <input type="date" id="dateTo" class="form-control" @bind="searchFilter.DateTo" />
            </div>

            <div class="form-group">
                <label for="sortBy">Sort By</label>
                <select id="sortBy" class="form-control" @bind="searchFilter.SortBy">
                    <option value="DateFound">Date Found</option>
                    <option value="Name">Name</option>
                    <option value="Status">Status</option>
                    <option value="Finder">Finder</option>
                </select>
            </div>

            <div class="form-group">
                <label for="sortOrder">Order</label>
                <select id="sortOrder" class="form-control" @bind="searchFilter.SortOrder">
                    <option value="desc">Newest First</option>
                    <option value="asc">Oldest First</option>
                </select>
            </div>
        </div>

        <div class="filter-buttons">
            <button class="btn-search" @onclick="SearchItems">Search</button>
            <button class="btn-clear" @onclick="ClearFilters">Clear Filters</button>
        </div>

        @if (totalCount > 0)
        {
            <div class="results-info">
                <span>Showing @((searchFilter.Page - 1) * searchFilter.PageSize + 1) - @Math.Min(searchFilter.Page * searchFilter.PageSize, totalCount) of @totalCount items</span>
                <span>Page @searchFilter.Page of @totalPages</span>
            </div>
        }
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <em>Loading...</em>
        </div>
    }
    else if (!items.Any())
    {
        <div class="no-items">
            <p>@(hasSearched ? "No items found matching your criteria." : "No items found. Add some items to get started!")</p>
        </div>
    }
    else
    {
        <div class="items-grid">
            @foreach (var item in items)
            {
                <div class="item-card">
                    <div class="item-image">
                        
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <img src="@item.ImagePath" 
                                 alt="@item.Name" 
                                 class="actual-image" 
                                 @onerror="@(() => HandleImageError(item.Id))"
                                 style="@(imageErrors.Contains(item.Id) ? "display: none;" : "")" />
                            
                            @*  Error fallback when image fails to load *@
                            @if (imageErrors.Contains(item.Id))
                            {
                                <div class="image-error">
                                    <div>
                                        <div></div>
                                        <div>Image not found</div>
                                    </div>
                                </div>
                            }
                        }
                        
                    </div>
                    <div class="item-details">
                        <h2 class="item-title">@item.Name</h2>
                        <p class="item-description">@item.Description</p>
                        @if (!string.IsNullOrEmpty(item.PhoneNumber))
                        {
                            <p class="item-meta">Phone: @item.PhoneNumber</p>
                        }
                        <p class="item-meta">Date: @item.DateFound.ToString("MMM dd, yyyy")</p>
                        <p class="item-status @(item.Status.ToString().ToLower() == "found" ? "status-found" : "status-lost")">
                            Status: @item.Status
                        </p>
                        @if (!string.IsNullOrEmpty(item.Finder))
                        {
                            <p class="item-finder">Finder/Owner: @item.Finder</p>
                        }
                        else
                        {
                            <p class="item-finder">Finder: N/A</p>
                        }
                        <div class="button-group">
                            <button class="btn btn-update" @onclick="() => NavigateToUpdate(item.Id)">Update</button>
                            <button class="btn btn-delete" @onclick="() => DeleteItem(item.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <div class="pagination">
                <button class="page-btn" @onclick="() => ChangePage(1)" disabled="@(searchFilter.Page == 1)">
                    &laquo; First
                </button>
                <button class="page-btn" @onclick="() => ChangePage(searchFilter.Page - 1)" disabled="@(searchFilter.Page == 1)">
                    &lsaquo; Previous
                </button>

                @for (int i = Math.Max(1, searchFilter.Page - 2); i <= Math.Min(totalPages, searchFilter.Page + 2); i++)
                {
                    int pageNumber = i;
                    <button class="page-btn @(searchFilter.Page == pageNumber ? "active" : "")"
                            @onclick="() => ChangePage(pageNumber)">
                        @pageNumber
                    </button>
                }

                <button class="page-btn" @onclick="() => ChangePage(searchFilter.Page + 1)" disabled="@(searchFilter.Page == totalPages)">
                    Next &rsaquo;
                </button>
                <button class="page-btn" @onclick="() => ChangePage(totalPages)" disabled="@(searchFilter.Page == totalPages)">
                    Last &raquo;
                </button>
            </div>
        }
    }
</div>

@code {
    private List<Models.Item> items = new();
    private ItemSearchFilterModel searchFilter = new();
    private int totalCount = 0;
    private int totalPages = 0;
    private bool isLoading = true;
    private bool hasSearched = false;
    private HashSet<int> imageErrors = new HashSet<int>(); //  Track images that failed to load

    protected override async Task OnInitializedAsync()
    {
        await SearchItems();
    }

    private async Task SearchItems()
    {
        isLoading = true;
        hasSearched = true;
        imageErrors.Clear(); //  Clear image errors when refreshing data
        StateHasChanged();

        var result = await ItemService.SearchAndFilterItems(searchFilter);
        items = result.Items;
        totalCount = result.TotalCount;
        totalPages = (int)Math.Ceiling((double)totalCount / searchFilter.PageSize);

        isLoading = false;
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        searchFilter = new ItemSearchFilterModel();
        await SearchItems();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            searchFilter.Page = page;
            await SearchItems();
        }
    }

    private void OpenAddItemModal()
    {
        Navigation.NavigateTo("/add-item");
    }

    private void NavigateToUpdate(int ItemId)
    {
        Navigation.NavigateTo($"/update/{ItemId}");
    }

    private async Task DeleteItem(int ItemId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            //  Get the item to delete its image file if it exists
            var itemToDelete = items.FirstOrDefault(i => i.Id == ItemId);
            if (itemToDelete != null && !string.IsNullOrEmpty(itemToDelete.ImagePath))
            {
                
                Console.WriteLine($"Item with image {itemToDelete.ImagePath} is being deleted");
            }
            
            await ItemService.DeleteItem(ItemId);
            await SearchItems(); // Refresh the current search results
        }
    }

    // Handle image loading errors
    private void HandleImageError(int itemId)
    {
        imageErrors.Add(itemId);
        StateHasChanged();
    }

   
}