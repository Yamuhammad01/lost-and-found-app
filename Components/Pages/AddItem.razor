@page "/add-item"
@rendermode InteractiveServer
@using LostAndFoundApp.Models
@using LostAndFoundApp.Enum
@using System.ComponentModel.DataAnnotations
@using System.IO

@inject LostAndFoundApp.Services.IItemService ItemService
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<head>
    <link rel="stylesheet" href="css/styles.css" />
</head>

<div class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="form-container">
        <h3>Add a New Item</h3>

        <div class="mb-3">
            <label for="Name" class="form-label">Item Name</label>
            <input type="text" id="Name" @bind="newName" class="form-control" />
            @if (string.IsNullOrEmpty(newName))
            {
                <div class="text-danger">Item Name is required.</div>
            }
        </div>

        <div class="mb-3">
            <label for="Finder" class="form-label">Full Name</label>
            <input type="text" id="Finder" @bind="newFinder" />
        </div>

        <div class="mb-3">
            <label for="status" class="form-label">Status</label>
            <InputSelect id="status" @bind-Value="newStatus">
                <option value="" disabled selected>Select status</option>
                <option value="Lost">Lost</option>
                <option value="Found">Found</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <input type="text" id="description"
                   @bind="newDescription"
                   @oninput="ValidateDescription"
                   class="form-control" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger mt-1">@errorMessage</div>
            }
        </div>

        <div class="mb-3">
            <label for="phoneNumber" class="form-label">Contact Number</label>
            <input type="text" id="phoneNumber" @bind="newPhoneNumber" />
        </div>

        <div class="mb-3">
            <label for="dateFounded" class="form-label">Date</label>
            <input type="date" id="datefounded" @bind="newDateFounded" class="form-control" />
        </div>

        <!-- File Upload Input for Image -->
        <div class="mb-3">
            <label for="image" class="form-label">Upload Image</label>
            <InputFile OnChange="OnInputFileChange" accept="image/*" />
            @if (!string.IsNullOrEmpty(imagePreviewUrl))
            {
                <img src="@imagePreviewUrl" alt="Preview" style="max-height: 100px; margin-top: 10px;" />
            }
            @if (!string.IsNullOrEmpty(uploadError))
            {
                <div class="text-danger mt-1">@uploadError</div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="text-success mt-1">@successMessage</div>
            }
        </div>

        <div class="text-center">
            <button class="btn btn-secondary me-2" @onclick="Cancel">Cancel</button>
            <button class="btn btn-primary" @onclick="InsertItem" disabled="@isUploading">
                @if (isUploading)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                Save
            </button>
        </div>
    </div>
</div>

@code {
    private string newName;
    private string newFinder;
    private string newStatus;
    private string newDescription;
    private string errorMessage;
    private string newPhoneNumber;
    private DateTime newDateFounded = DateTime.Today;
    private string newImagePath;
    private string imagePreviewUrl;
    private string uploadError;
    private string successMessage;
    private bool isUploading = false;
    private IBrowserFile selectedFile;

    // Handle file selection and create preview
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadError = string.Empty;
        successMessage = string.Empty;
        imagePreviewUrl = string.Empty;
        newImagePath = string.Empty;
        selectedFile = null;

        var file = e.File;
        if (file != null)
        {
            try
            {
                // Validate file size (10MB limit)
                if (file.Size > 10_000_000)
                {
                    uploadError = "File size must be less than 10MB";
                    return;
                }

                // Validate file type
                var allowedTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp" };
                if (!allowedTypes.Contains(file.ContentType.ToLower()))
                {
                    uploadError = "Only image files (JPEG, PNG, GIF, WebP) are allowed";
                    return;
                }

                // Store the selected file for later upload
                selectedFile = file;

                // Create preview using base64
                var buffer = new byte[file.Size];
                using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
                await stream.ReadAsync(buffer);
                var base64String = Convert.ToBase64String(buffer);
                imagePreviewUrl = $"data:{file.ContentType};base64,{base64String}";

                StateHasChanged();
            }
            catch (Exception ex)
            {
                uploadError = $"Error processing file: {ex.Message}";
                Console.WriteLine($"File processing error: {ex}");
            }
        }
    }

    private async Task InsertItem()
    {
        if (string.IsNullOrEmpty(newName))
        {
            Console.WriteLine("Item Name is required.");
            return;
        }

        try
        {
            isUploading = true;
            uploadError = string.Empty;
            successMessage = string.Empty;
            StateHasChanged();

            // Upload image to Supabase first if a file is selected
            if (selectedFile != null)
            {
                using var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10_000_000));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "Image", selectedFile.Name);

                var baseUri = Navigation.ToAbsoluteUri("/").ToString();
                var apiUrl = $"{baseUri}api/Image";
                var response = await HttpClient.PostAsync(apiUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<ImageUploadResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Url))
                    {
                        newImagePath = result.Url;
                        successMessage = "Item added successfully";
                    }
                }
                else
                {
                    uploadError = "Failed to upload image. Please try again.";
                    return;
                }
            }

            Console.WriteLine("Form submitted successfully!");
            newDateFounded = DateTime.SpecifyKind(newDateFounded, DateTimeKind.Utc);

            var newItem = new Models.Item
                {
                    Name = newName,
                    Finder = newFinder,
                    Status = Enum.Parse<ItemStatus>(newStatus, ignoreCase: true),
                    Description = newDescription,
                    PhoneNumber = newPhoneNumber,
                    DateFound = newDateFounded,
                    ImagePath = newImagePath
                };

            await ItemService.AddItem(newItem);

            // Show success message if no image was uploaded
            if (selectedFile == null)
            {
                successMessage = "Item added successfully";
            }

            StateHasChanged();
            await Task.Delay(1500); // Show success message briefly
            Navigation.NavigateTo("/item");
        }
        catch (Exception ex)
        {
            uploadError = $"Error saving item: {ex.Message}";
            Console.WriteLine($"Error saving item: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/item");
    }

    private void ValidateDescription(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        if (input.Length > 70)
        {
            errorMessage = "You can only input maximum of 60 characters";
            newDescription = input.Substring(0, 60);
        }
        else
        {
            errorMessage = string.Empty;
            newDescription = input;
        }
    }

    public class ImageUploadResponse
    {
        public string Url { get; set; } = string.Empty;
    }
}